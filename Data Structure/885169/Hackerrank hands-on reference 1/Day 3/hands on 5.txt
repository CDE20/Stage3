import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    /*
     * Complete the runningMedian function below.
     */
    static double[] runningMedian(int[] a) {
        int n=a.length;
        
        double[] medianArr=new double[n];
        
        double median=0.0;
        int i=0;
        
        //max-heap;
        PriorityQueue<Integer> q1=new PriorityQueue<Integer>(Collections.reverseOrder());
        
        //min-heap
        PriorityQueue<Integer> q2=new PriorityQueue<Integer>();
        
        for(int j=0;j<n;j++)
        {
            int x=a[j];
            if(q1.size()==q2.size())
            {
                if(x<median)
                {
                    q1.add(x);
                    median=(double)q1.peek();
                    medianArr[i]=median;
                    i=i+1;
                }
                else
                {
                    q2.add(x);
                    median=(double)q2.peek();
                    medianArr[i]=median;
                    i=i+1;
                }
            }
            else if(q1.size()>q2.size())
            {
                if(x<median)
                {
                    q2.add(q1.remove());
                    q1.add(x);
                }
                else
                {
                    q2.add(x);
                }
                median=(double)(q1.peek() + q2.peek())/2;
                medianArr[i]=median;
                i=i+1;
            }
            else
            {
                if(x>median)
                {
                    q1.add(q2.remove());
                    q2.add(x);
                    
                }
                else
                {
                    q1.add(x);
                }
                median=(double)(q1.peek() + q2.peek())/2;
                medianArr[i]=median;
                i=i+1;
            }
        }
        
        return medianArr;
        
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int aCount = Integer.parseInt(scanner.nextLine().trim());

        int[] a = new int[aCount];

        for (int aItr = 0; aItr < aCount; aItr++) {
            int aItem = Integer.parseInt(scanner.nextLine().trim());
            a[aItr] = aItem;
        }

        double[] result = runningMedian(a);

        for (int resultItr = 0; resultItr < result.length; resultItr++) {
            bufferedWriter.write(String.valueOf(result[resultItr]));

            if (resultItr != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}
